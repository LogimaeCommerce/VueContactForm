{"remainingRequest":"/Users/dutyuzh/Sites/dashautyuzh.io/node_modules/babel-loader/lib/index.js!/Users/dutyuzh/Sites/dashautyuzh.io/node_modules/eslint-loader/index.js??ref--13-0!/Users/dutyuzh/Sites/dashautyuzh.io/src/plugins/resource/index.js","dependencies":[{"path":"/Users/dutyuzh/Sites/dashautyuzh.io/src/plugins/resource/index.js","mtime":1538070502690},{"path":"/Users/dutyuzh/Sites/dashautyuzh.io/node_modules/cache-loader/dist/cjs.js","mtime":1530108614324},{"path":"/Users/dutyuzh/Sites/dashautyuzh.io/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/dutyuzh/Sites/dashautyuzh.io/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport cache from './cache';\nimport _merge from 'lodash.merge'; // install $resource as a Vue plugin\n\nexport default {\n  install: function install(Vue, _ref) {\n    var _ref$endpoint = _ref.endpoint,\n        endpoint = _ref$endpoint === void 0 ? '' : _ref$endpoint,\n        _ref$resources = _ref.resources,\n        resources = _ref$resources === void 0 ? {} : _ref$resources;\n\n    Vue.prototype.$getResource = function (method, options) {\n      var _this = this;\n\n      var name = this.$options.resource;\n      if (!name || !resources[name] || !resources[name][method]) return; // get fetch path and response resolver/mapper\n\n      var _resources$name$metho = resources[name][method](options),\n          path = _resources$name$metho.path,\n          resolve = _resources$name$metho.resolve;\n\n      var uri = endpoint + path; // methods return promise to allow chaining\n\n      var mappers = {\n        // only return promise without modifying instance $data\n        pipe: function pipe(dataSet) {\n          return Promise.resolve(dataSet);\n        },\n        // deep merge object with instance $data\n        merge: function merge(dataSet) {\n          _merge(_this.$data, dataSet);\n\n          return Promise.resolve(dataSet);\n        },\n        // set individual props on instance $data\n        set: function set(dataSet) {\n          Object.keys(dataSet).forEach(function (prop) {\n            _this.$set(_this.$data, prop, dataSet[prop]);\n          });\n          return Promise.resolve(dataSet);\n        } // check to see if the resource has been cached already\n\n      };\n      if (cache.has(uri)) return resolve(cache.get(uri), mappers); // fetch, parse and cache resource then pass to resolver\n\n      return fetch(uri).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        return cache.set(uri, response);\n      }).then(function (response) {\n        return resolve(response, mappers);\n      });\n    };\n  }\n};",{"version":3,"sources":["src/plugins/resource/index.js"],"names":["cache","_merge","install","Vue","endpoint","resources","prototype","$getResource","method","options","name","$options","resource","path","resolve","uri","mappers","pipe","Promise","dataSet","merge","$data","set","Object","keys","forEach","$set","prop","has","get","fetch","then","response","json"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AACA,eAAe;AACbC,SADa,mBACLC,GADK,QACmC;AAAA,6BAAjCC,QAAiC;AAAA,QAAjCA,QAAiC,8BAAtB,EAAsB;AAAA,8BAAlBC,SAAkB;AAAA,QAAlBA,SAAkB,+BAAN,EAAM;;AAC9CF,QAAIG,SAAJ,CAAcC,YAAd,GAA6B,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAAA;;AACtD,UAAIC,OAAO,KAAKC,QAAL,CAAcC,QAAzB;AACA,UAAI,CAACF,IAAD,IAAS,CAACL,UAAUK,IAAV,CAAV,IAA6B,CAACL,UAAUK,IAAV,EAAgBF,MAAhB,CAAlC,EAA2D,OAFL,CAItD;;AAJsD,kCAK9BH,UAAUK,IAAV,EAAgBF,MAAhB,EAAwBC,OAAxB,CAL8B;AAAA,UAKhDI,IALgD,yBAKhDA,IALgD;AAAA,UAK1CC,OAL0C,yBAK1CA,OAL0C;;AAMtD,UAAIC,MAAMX,WAAWS,IAArB,CANsD,CAQtD;;AACA,UAAMG,UAAU;AACd;AACAC,cAAM;AAAA,iBAAWC,QAAQJ,OAAR,CAAgBK,OAAhB,CAAX;AAAA,SAFQ;AAId;AACAC,eAAO,wBAAW;AAChBnB,iBAAO,MAAKoB,KAAZ,EAAmBF,OAAnB;;AACA,iBAAOD,QAAQJ,OAAR,CAAgBK,OAAhB,CAAP;AACD,SARa;AAUd;AACAG,aAAK,sBAAW;AACdC,iBAAOC,IAAP,CAAYL,OAAZ,EAAqBM,OAArB,CAA6B,gBAAQ;AACnC,kBAAKC,IAAL,CAAU,MAAKL,KAAf,EAAsBM,IAAtB,EAA4BR,QAAQQ,IAAR,CAA5B;AACD,WAFD;AAIA,iBAAOT,QAAQJ,OAAR,CAAgBK,OAAhB,CAAP;AACD,SAjBa,CAoBhB;;AApBgB,OAAhB;AAqBA,UAAInB,MAAM4B,GAAN,CAAUb,GAAV,CAAJ,EAAoB,OAAOD,QAAQd,MAAM6B,GAAN,CAAUd,GAAV,CAAR,EAAwBC,OAAxB,CAAP,CA9BkC,CAgCtD;;AACA,aAAOc,MAAMf,GAAN,EACJgB,IADI,CACC;AAAA,eAAYC,SAASC,IAAT,EAAZ;AAAA,OADD,EAEJF,IAFI,CAEC;AAAA,eAAY/B,MAAMsB,GAAN,CAAUP,GAAV,EAAeiB,QAAf,CAAZ;AAAA,OAFD,EAGJD,IAHI,CAGC;AAAA,eAAYjB,QAAQkB,QAAR,EAAkBhB,OAAlB,CAAZ;AAAA,OAHD,CAAP;AAID,KArCD;AAsCD;AAxCY,CAAf","sourceRoot":"/Users/dutyuzh/Sites/dashautyuzh.io","sourcesContent":["import cache from './cache'\nimport _merge from 'lodash.merge'\n\n// install $resource as a Vue plugin\nexport default {\n  install(Vue, { endpoint = '', resources = {} }) {\n    Vue.prototype.$getResource = function (method, options) {\n      let name = this.$options.resource\n      if (!name || !resources[name] || !resources[name][method]) return\n\n      // get fetch path and response resolver/mapper\n      let { path, resolve } = resources[name][method](options)\n      let uri = endpoint + path\n\n      // methods return promise to allow chaining\n      const mappers = {\n        // only return promise without modifying instance $data\n        pipe: dataSet => Promise.resolve(dataSet),\n\n        // deep merge object with instance $data\n        merge: dataSet => {\n          _merge(this.$data, dataSet)\n          return Promise.resolve(dataSet)\n        },\n\n        // set individual props on instance $data\n        set: dataSet => {\n          Object.keys(dataSet).forEach(prop => {\n            this.$set(this.$data, prop, dataSet[prop])\n          })\n\n          return Promise.resolve(dataSet)\n        }\n      }\n\n      // check to see if the resource has been cached already\n      if (cache.has(uri)) return resolve(cache.get(uri), mappers)\n\n      // fetch, parse and cache resource then pass to resolver\n      return fetch(uri)\n        .then(response => response.json())\n        .then(response => cache.set(uri, response))\n        .then(response => resolve(response, mappers))\n    }\n  }\n}\n"]}]}